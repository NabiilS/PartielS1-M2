length(salary$sex)
length(salary$income_40K)
contingency_table <- table(salary$sex, salary$income_40K)
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "lightblue"),
legend.text = c("Femme", "Homme"),
args.legend = list(x = "topright"),
names.arg = c("<=50k", ">50k"))
ggplot(salary, aes(x = education_num, y = income_40K)) +
geom_bar(stat = "summary", fun = "mean") +
xlab("Niveau d'Éducation") +
ylab("Moyenne de Salaire >50K") +
ggtitle("Moyenne de Salaire par Niveau d'Éducation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(salary, aes(x = education_num, y = income_40K)) +
geom_boxplot() +
xlab("Niveau d'Éducation") +
ylab("Salaire >50K") +
ggtitle("Distribution des Salaires par Niveau d'Éducation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(salary, aes(x = education_num, y =income_40K)) +
geom_violin() +
xlab("Niveau d'Éducation") +
ylab("Salaire >50K") +
ggtitle("Distribution des Salaires par Niveau d'Éducation avec Densité") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(dplyr)
library(ggplot2)
salary$income_40K_binary <- ifelse(salary$income_40K == " >50K", 1, 0)
aggregated_data <- salary %>%
group_by(marital_status) %>%
summarize(percentage = mean(income_40K_binary) * 100)
ggplot(aggregated_data, aes(x = marital_status, y = percentage)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.25, hjust = 0.5) +
xlab("Statut Marital") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Statut Marital") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Créer un histogramme avec une couleur par âge
my_colors <- rainbow(length(unique(salary$age)))
hist(salary$age, col = my_colors, main = "Histogramme par âge", xlab = "Âge")
library(dplyr)
library(ggplot2)
aggregated_data <- salary %>%
group_by(occupation) %>%
summarize(percentage = mean(income_40K_binary) * 100)
ggplot(aggregated_data, aes(x = occupation, y = percentage)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.25, hjust = 0.5) +
xlab("Occupation") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Occupation") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
aggregated_data <- salary %>%
group_by(workclass) %>%
summarize(percentage = mean(income_40K_binary) * 100)
ggplot(aggregated_data, aes(x = workclass, y = percentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.25, hjust = 0.5) +
xlab("Classe de Travail") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Classe de Travail") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
aggregated_data_relationship <- salary %>%
group_by(relationship) %>%
summarize(percentage = mean(income_40K_binary) * 100)
ggplot(aggregated_data_relationship, aes(x = relationship, y = percentage)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.3, hjust = 0.5) +
xlab("Relation Familiale") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Relation Familiale") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
aggregated_data_race <- salary %>%
group_by(race) %>%
summarize(percentage = mean(income_40K_binary) * 100)
ggplot(aggregated_data_race, aes(x = race, y = percentage)) +
geom_bar(stat = "identity", fill = "lightgreen") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.3, hjust = 0.5) +
xlab("Race") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Race") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(aggregated_data_country, aes(x = reorder(native_country, -percentage), y = percentage)) +
geom_bar(stat = "identity", aes(fill = percentage)) +  # Utilisez 'fill' avec la variable 'percentage'
scale_fill_gradient(low = "blue", high = "red") +  # Définissez le gradient de bleu à rouge
xlab("Pays d'origine") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Pays d'origine") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
glm_model = glm(income_40K ~ age+sex, data=salary, family = "binomial")
tbl_regression(glm_model, exponentiate = TRUE)
salary$sex <- as.factor(salary$sex)
salary$race <- as.factor(salary$race)
salary$native_country <- as.factor(salary$native_country)
output <- lm(salary$capital_gain~salary$sex+salary$race+salary$native_country+salary$age)
summary(output)
scatterplot3d(salary$native_country, salary$sex, salary$capital_gain, main = "Régression Linéaire en 3D", xlab = "Variable indépendante 1", ylab = "Variable indépendante 2", zlab = "Variable dépendante")
```{r}
```{r}
summary(salary$workclass[salary$workclass == " ?"])
summary(salary$workclass[salary$occupation == " ?"])
summary(salary$workclass[salary$native_country == " ?"])
library(dplyr)
library(ggplot2)
# Préparer les données
salary <- salary %>%
mutate(native_country = ifelse(native_country %in% names(table_nationalites)[table_nationalites < threshold], 'Other', native_country))
library(dplyr)
library(ggplot2)
# Définir le seuil pour le regroupement dans "Other"
threshold <- 5
# Création d'une nouvelle table pour la visualisation
table_nationalites <- salary %>%
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup()
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count)) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Créer un diagramme en camembert avec ggplot2
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE) +  # Couleurs viridis
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right")
library(dplyr)
library(ggplot2)
library(viridis)
# Définir le seuil pour le regroupement dans "Other"
threshold <- 5
# Création d'une nouvelle table pour la visualisation
table_nationalites <- salary %>%
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup()
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count)) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Créer un diagramme en camembert avec ggplot2
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE) +  # Couleurs viridis
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right")
library(dplyr)
library(ggplot2)
library(viridis)
# Définir le seuil pour le regroupement dans "Other"
threshold <- 5
# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
filter(native_country != "United-States") %>%  # Exclure les États-Unis
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup()
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count)) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE) +  # Couleurs viridis
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
labs(fill = "Pays d'origine")
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE) +  # Couleurs viridis
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
labs(fill = "Pays d'origine")
library(dplyr)
library(ggplot2)
library(viridis)
# Définir le seuil pour le regroupement dans "Other"
threshold <- 5
# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
filter(native_country != "United-States") %>%  # Exclure les États-Unis
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup()
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count)) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE) +  # Couleurs viridis
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
labs(fill = "Pays d'origine")
library(dplyr)
library(ggplot2)
library(viridis)
# Définir le seuil pour le regroupement dans "Other"
threshold <- 5
# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
filter(native_country != " United-States") %>%  # Exclure les États-Unis
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup()
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count)) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE) +  # Couleurs viridis
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
labs(fill = "Pays d'origine")
# Assurez-vous que table_nationalites utilise le nom des pays pour la légende
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, name = "Pays d'origine") +  # Nom de la légende
geom_text(aes(label = ifelse(native_country != "Other", paste(sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))  # Ajuster la position du titre de la légende
# Assurez-vous que table_nationalites utilise le nom des pays pour la légende
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, name = "Pays d'origine") +  # Nom de la légende
geom_text(aes(label = ifelse(native_country != "Other", paste(sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))  # Ajuster la position du titre de la légende
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE) +  # Couleurs viridis
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
labs(fill = "Pays d'origine")
# Assurez-vous que table_nationalites utilise le nom des pays pour la légende
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, name = "Pays d'origine") +  # Nom de la légende
geom_text(aes(label = ifelse(native_country != "Other", paste(sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))  # Ajuster la position du titre de la légende
# Assurez-vous que table_nationalites utilise le nom des pays pour la légende
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = factor(native_country, labels = native_country))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, name = "Pays d'origine", guide = guide_legend(override.aes = list(label = native_country))) +
geom_text(aes(label = ifelse(native_country != "Other", paste(sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
labs(fill = "Pays d'origine")
library(dplyr)
library(ggplot2)
library(viridis)
# Définir le seuil pour le regroupement dans "Other"
threshold <- 5
# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
filter(native_country != " United-States") %>%  # Exclure les États-Unis
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup()
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count)) %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE) +  # Couleurs viridis
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
labs(fill = "Pays d'origine")
# Assurez-vous que table_nationalites utilise le nom des pays pour la légende
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, name = "Pays d'origine") +  # Nom de la légende
geom_text(aes(label = ifelse(native_country != "Other", paste(sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))  # Ajuster la position du titre de la légende
# Assurez-vous que table_nationalites utilise le nom des pays pour la légende
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = factor(native_country, labels = native_country))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, name = "Pays d'origine", guide = guide_legend(override.aes = list(label = native_country))) +
geom_text(aes(label = ifelse(native_country != "Other", paste(sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5)) +
theme_void() +
theme(legend.position = "right") +
labs(fill = "Pays d'origine")
# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
filter(native_country != "United-States") %>%  # Exclure les États-Unis
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup() %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count), Percentage = sum(Percentage)) %>%
ungroup() %>%
mutate(native_country = as.character(native_country))  # Convertir en caractère pour éviter les problèmes de facteur
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, name = "Pays d'origine") +  # Couleurs viridis
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5), check_overlap = TRUE) + # Pour éviter le chevauchement des étiquettes
theme_void() +
theme(legend.position = "right") +
labs(fill = "Pays d'origine")
# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
filter(native_country != " United-States") %>%  # Exclure les États-Unis
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup() %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count), Percentage = sum(Percentage)) %>%
ungroup() %>%
mutate(native_country = as.character(native_country))  # Convertir en caractère pour éviter les problèmes de facteur
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, name = "Pays d'origine") +  # Couleurs viridis
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5), check_overlap = TRUE) + # Pour éviter le chevauchement des étiquettes
theme_void() +
theme(legend.position = "right") +
labs(fill = "Pays d'origine")
# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
filter(native_country != "United-States") %>%  # Exclure les États-Unis
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup() %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count), Percentage = sum(Percentage)) %>%
ungroup() %>%
mutate(native_country = as.character(native_country))  # Convertir en caractère pour éviter les problèmes de facteur
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, begin = 0.3, end = 0.9, direction = -1, name = "Pays d'origine") +
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5), size = 3) +
theme_void() +
theme(legend.position = "right", legend.text = element_text(size = 6), legend.title = element_text(size = 8)) +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5, label.position = "right"))  # Ajuster la position du titre de la légende
# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
filter(native_country != " United-States") %>%  # Exclure les États-Unis
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup() %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count), Percentage = sum(Percentage)) %>%
ungroup() %>%
mutate(native_country = as.character(native_country))  # Convertir en caractère pour éviter les problèmes de facteur
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, begin = 0.3, end = 0.9, direction = -1, name = "Pays d'origine") +
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5), size = 3) +
theme_void() +
theme(legend.position = "right", legend.text = element_text(size = 6), legend.title = element_text(size = 8)) +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5, label.position = "right"))  # Ajuster la position du titre de la légende
# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
filter(native_country != " United-States") %>%  # Exclure les États-Unis
group_by(native_country) %>%
summarise(Count = n()) %>%
ungroup() %>%
mutate(Percentage = Count / sum(Count) * 100) %>%
arrange(desc(Percentage))
# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10
# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
group_by(native_country) %>%
summarise(Count = sum(Count), Percentage = sum(Percentage)) %>%
ungroup() %>%
mutate(native_country = as.character(native_country))  # Convertir en caractère pour éviter les problèmes de facteur
# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
scale_fill_viridis(discrete = TRUE, begin = 0.3, end = 0.9, direction = -1, name = "Pays d'origine") +
geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
position = position_stack(vjust = 0.5), size = 3) +
theme_void() +
theme(legend.position = "right", legend.text = element_text(size = 6), legend.title = element_text(size = 8)) +
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5, label.position = "right"))  # Ajuster la position du titre de la légende
