# Recodage de la variable income_40k en income_50k qui aura
salary$income_50K <- ifelse(salary$income_40K == " >50K", 1, 0)
salary <- read.csv("Salarie.csv")
# Compter le nombre d'éléments par type dans chaque colonne
count_by_type <- lapply(salary, table)
# Afficher les résultats
print(count_by_type)
summary(salary$workclass[salary$workclass == " ?"])
summary(salary$workclass[salary$occupation == " ?"])
summary(salary$workclass[salary$native_country == " ?"])
summary(salary)
str(salary)
head(salary)
tail(salary)
View(salary)
colonnes <- ncol(salary)
colnames(salary)
lignes <- nrow(salary)
sprintf("Le dataframe a %d lignes et %d colonnes.", lignes, colonnes)
valeurs_manquantes_par_colonne <- colSums(is.na(salary))
print(valeurs_manquantes_par_colonne)
nationalite <- unique(salary$native_country)
print(nationalite)
table_nationalites <- table(salary$native_country)
# Créer un diagramme en camembert avec la fonction pie()
pie(table_nationalites, labels = names(table_nationalites), main = "Répartition des nationalités")
# Afficher le nombre de lignes par nationalité
print(table_nationalites)
table_sexe <- table(salary$sex)
pourcentages <- round(100 * table_sexe / sum(table_sexe), 1)
pie(table_sexe, labels = sprintf("%s\n%.1f%%", names(table_sexe), pourcentages), main = "Répartition par sexe")
table_marital <- table(salary$marital_status)
print(table_marital)
boxplot(salary$hours_per_week ~ salary$income_40K, data = salary)
boxplot(salary$age ~ salary$income_40K, data = salary)
salary$sex_binary <- ifelse(salary$sex == " Male", 1, 0)
# Recodage de la variable income_40k en income_50k qui aura
salary$income_50K <- ifelse(salary$income_40K == " >50K", 1, 0)
sum(is.na(salary$income_50K))
sum(is.na(salary$sex))
# Nuage de points Sexe vs Salaire
plot(salary$sex, salary$income_50K, main = "Nuage de points du Sexe vs Salaire", xlab = "Sexe", ylab = "Salaire")
# Recodage de la variable income_40k en income_50k qui aura
salary$income_50K <- ifelse(salary$income_40K == " >50K", 1, 0)
sum(is.na(salary$income_50K))
sum(is.na(salary$sex))
# Nuage de points Sexe vs Salaire
plot(salary$sex, salary$income_50K, main = "Nuage de points du Sexe vs Salaire", xlab = "Sexe", ylab = "Salaire")
summary(salary)
View(salary)
plot(as.factor(salary$sex), salary$income_50K, main = "Nuage de points du Sexe vs Salaire", xlab = "Sexe", ylab = "Salaire")
# Créer un tableau de contingence
contingency_table <- table(salary$sex_binary, salary$income_50K)
# Afficher le tableau de contingence
print(contingency_table)
# Graphique en barres empilées
barplot(contingency_table, beside = FALSE, legend = TRUE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre", col = c("red", "blue"),
args.legend = list(x = "topright", c("<=50K", ">50K")))
# Créer un tableau de contingence
contingency_table <- table(salary$sex_binary, salary$income_50K)
# Afficher le tableau de contingence
print(contingency_table)
# Graphique en barres empilées
barplot(contingency_table, beside = TRUE, legend = TRUE,
main = "Revenu par Sexe",
xlab = "Revenu >50k", ylab = "Sexe", col = c("red", "blue"),
args.legend = list(x = "topright", c("<=50K", ">50K")))
# Créer un tableau de contingence
contingency_table <- table(salary$sex_binary, salary$income_50K)
# Afficher le tableau de contingence
print(contingency_table)
# Graphique en barres empilées
barplot(contingency_table, beside = TRUE, legend = TRUE,
main = "Revenu par Sexe",
xlab = "Revenu >50k", ylab = "Sexe", col = c("red", "blue"),
args.legend = list(x = "topright", c("<=50K", ">50K")))
# Graphique en barres empilées
barplot(contingency_table, beside = TRUE, legend = FALSE,
main = "Revenu par Sexe",
xlab = "Revenu >50k", ylab = "Sexe", col = c("red", "blue"),
args.legend = list(x = "topright", c("<=50K", ">50K")))
# Graphique en barres empilées
barplot(contingency_table, beside = FALSE, legend = TRUE,
main = "Revenu par Sexe",
xlab = "Revenu", ylab = "Nombre de personne", col = c("red", "blue"),
args.legend = list(x = "topright", c("<=50K", ">50K")))
# Graphique en barres empilées
barplot(contingency_table, beside = FALSE, legend = TRUE,
main = "Revenu par Sexe",
xlab = "Revenu", ylab = "Nombre de personne", col = c("red", "blue"),
args.legend = list(x = "topright", c("<=50K", "addakldalkjdal")))
# Créer un tableau de contingence
contingency_table <- table(salary$sex_binary, salary$income_50K)
# Afficher le tableau de contingence
print(contingency_table)
# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE, legend = TRUE,
main = "Revenu par Sexe",
xlab = "Revenu", ylab = "Nombre de personnes", col = c("red", "blue"),
names.arg = c("<50K", ">=50K"),
args.legend = list(x = "topright", c("Femme", "Homme")))
# Graphique en barres empilées avec les ajustements
# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("red", "blue"),
legend.text = c("<=50K", ">50K"), # Définit les textes de la légende
args.legend = list(x = "topright"), # Positionne la légende
names.arg = c("Femme", "Homme")) # Définit les étiquettes de l'axe x
# Graphique en barres empilées avec les ajustements
# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("red", "blue"),
legend.text = c("Homme", "Femme"), # Définit les textes de la légende
args.legend = list(x = "topright"), # Positionne la légende
names.arg = c("<=50k", ">50k")) # Définit les étiquettes de l'axe x
# Graphique en barres empilées avec les ajustements
# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("red", "blue"),
legend.text = c("Femme", "Homme"), # Définit les textes de la légende
args.legend = list(x = "topright"), # Positionne la légende
names.arg = c("<=50k", ">50k")) # Définit les étiquettes de l'axe x
# Graphique en barres empilées avec les ajustements
# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "blue"),
legend.text = c("Femme", "Homme"), # Définit les textes de la légende
args.legend = list(x = "topright"), # Positionne la légende
names.arg = c("<=50k", ">50k")) # Définit les étiquettes de l'axe x
# Graphique en barres empilées avec les ajustements
# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "cyan
"),
legend.text = c("Femme", "Homme"), # Définit les textes de la légende
args.legend = list(x = "topright"), # Positionne la légende
names.arg = c("<=50k", ">50k")) # Définit les étiquettes de l'axe x
# Graphique en barres empilées avec les ajustements
# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "cyan"),
legend.text = c("Femme", "Homme"), # Définit les textes de la légende
args.legend = list(x = "topright"), # Positionne la légende
names.arg = c("<=50k", ">50k")) # Définit les étiquettes de l'axe x
# Graphique en barres empilées avec les ajustements
# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "darkblue"),
legend.text = c("Femme", "Homme"), # Définit les textes de la légende
args.legend = list(x = "topright"), # Positionne la légende
names.arg = c("<=50k", ">50k")) # Définit les étiquettes de l'axe x
# Graphique en barres empilées avec les ajustements
# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "lightblue"),
legend.text = c("Femme", "Homme"), # Définit les textes de la légende
args.legend = list(x = "topright"), # Positionne la légende
names.arg = c("<=50k", ">50k")) # Définit les étiquettes de l'axe x
as.factor(salarie$income_40K)
as.factor(salary$income_40K)
# Recodage de la variable income_40k en income_50k qui aura
class(salary$income_40K)
(as.factor(salary$income_40K))
class(as.factor(salary$income_40K))
# Créer un tableau de contingence
contingency_table <- table(salary$sex, salary$income_40K)
# Afficher le tableau de contingence
print(contingency_table)
# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "lightblue"),
legend.text = c("Femme", "Homme"), # Définit les textes de la légende
args.legend = list(x = "topright"), # Positionne la légende
names.arg = c("<=50k", ">50k")) # Définit les étiquettes de l'axe x
```
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "lightblue"),
legend.text = c("Femme", "Homme"), # Définit les textes de la légende
args.legend = list(x = "topright"), # Positionne la légende
names.arg = c("<=50k", ">50k")) # Définit les étiquettes de l'axe x
boxplot(salary$hours_per_week ~ salary$income_40K, data = salary)
boxplot(salary$age ~ salary$income_40K, data = salary)
glm(income_40K ~ age+sex, data=salary, family = "binomial")
salary$income_40K <- as.factor(salary$income_40K)
glm(income_40K ~ age+sex, data=salary, family = "binomial")
glm_model = glm(income_40K ~ age+sex, data=salary, family = "binomial")
summary(glm_model)
tbl_regression(glm_model, exponentiate = TRUE)
install.packages("gtsummary")
library(gtsummary)
install.packages("compareGroups")
tbl_regression(glm_model, exponentiate = TRUE)
nationality_table <- table(salary$nationality, salary$income_40K)
nationality_table <- table(salary$nationality, salary$income_40K)
nationality_table <- table(salary$nationality, salary$income_40K)
class(as.factor(salary$income_40K))
class(as.factor(salary$nationality))
nationality_table <- table(as.factor(salary$nationality, salary$income_40K)
barplot(nationality_table, beside = FALSE,
barplot(nationality_table, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes",
col = c("gray", "gold"),
legend.text = c("<=50k", ">50k"),
las = 2)
salary <- read.csv("Salarie.csv")
# Compter le nombre d'éléments par type dans chaque colonne
count_by_type <- lapply(salary, table)
# Afficher les résultats
print(count_by_type)
summary(salary$workclass[salary$workclass == " ?"])
summary(salary$workclass[salary$occupation == " ?"])
summary(salary$workclass[salary$native_country == " ?"])
summary(salary)
str(salary)
head(salary)
tail(salary)
View(salary)
colonnes <- ncol(salary)
colnames(salary)
lignes <- nrow(salary)
sprintf("Le dataframe a %d lignes et %d colonnes.", lignes, colonnes)
valeurs_manquantes_par_colonne <- colSums(is.na(salary))
print(valeurs_manquantes_par_colonne)
nationalite <- unique(salary$native_country)
print(nationalite)
table_nationalites <- table(salary$native_country)
# Créer un diagramme en camembert avec la fonction pie()
pie(table_nationalites, labels = names(table_nationalites), main = "Répartition des nationalités")
# Afficher le nombre de lignes par nationalité
print(table_nationalites)
table_sexe <- table(salary$sex)
pourcentages <- round(100 * table_sexe / sum(table_sexe), 1)
pie(table_sexe, labels = sprintf("%s\n%.1f%%", names(table_sexe), pourcentages), main = "Répartition par sexe")
table_marital <- table(salary$marital_status)
print(table_marital)
boxplot(salary$hours_per_week ~ salary$income_40K, data = salary)
boxplot(salary$age ~ salary$income_40K, data = salary)
salary$sex_binary <- ifelse(salary$sex == " Male", 1, 0)
# Recodage de la variable income_40k en income_50k qui aura
class(salary$income_40K)
class(as.factor(salary$income_40K))
salary$income_40K <- as.factor(salary$income_40K)
salary$income_50K <- ifelse(salary$income_40K == " >50K", 1, 0)
sum(is.na(salary$income_50K))
sum(is.na(salary$sex))
# Nuage de points Sexe vs Salaire
plot(salary$sex, salary$income_50K, main = "Nuage de points du Sexe vs Salaire", xlab = "Sexe", ylab = "Salaire")
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "lightblue"),
legend.text = c("Femme", "Homme"),
args.legend = list(x = "topright"),
names.arg = c("<=50k", ">50k"))
barplot(nationality_table, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes",
col = c("gray", "gold"),
legend.text = c("<=50k", ">50k"),
las = 2)
class(as.factor(salary$nationality))
nationality_table <- table(as.factor(salary$nationality, salary$income_40K)
barplot(nationality_table, beside = FALSE,
class(as.factor(salary$nationality))
nationality_table <- table(as.factor(salary$nationality, salary$income_40K)
nationality_table <- table(as.factor(salary$nationality, salary$income_40K))
barplot(nationality_table, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes",
col = c("gray", "gold"),
legend.text = c("<=50k", ">50k"),
las = 2)
nationality_factor = as.factor(salary$nationality))
nationality_factor = as.factor(salary$nationality)
nationality_table <- table(as.factor(nationality_factor, salary$income_40K))
nationality_table <- table(nationality_factor, salary$income_40K)
class( salary$income_40K)
nationality_table <- table(nationality_factor, salary$income_40K)
nationality_factor = as.factor(salary$nationality)
class(salary$income_40K)
nationality_table <- table(nationality_factor, salary$income_40K)
nationality_factor = as.factor(salary$nationality)
class(salary$income_40K)
nationality_table <- table(nationality_factor, salary$income_40K)
summary(salary$income_40K)
nationality_factor = as.factor(salary$native_country)
nationality_factor = as.factor(salary$native_country)
class(salary$income_40K)
nationality_table <- table(nationality_factor, salary$income_40K)
barplot(nationality_table, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes",
col = c("gray", "gold"),
legend.text = c("<=50k", ">50k"),
las = 2)
bar
plot(nationality_table, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes",
col = c("gray", "gold"),
legend.text = c("<=50k", ">50k"),
las = 2)
pie(nationality_table, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes",
col = c("gray", "gold"),
legend.text = c("<=50k", ">50k"),
las = 2)
barplot
barplot(nationality_table, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes",
col = c("gray", "gold"),
legend.text = c("<=50k", ">50k"),
las = 2)
# Créer un tableau de contingence
nationality_income_table <- table(salary$native_country, salary$income_40K)
# Trier le tableau pour avoir les nationalités les plus communes en bas
nationality_income_table <- nationality_income_table[order(rowSums(nationality_income_table), decreasing = TRUE), ]
# Générer des couleurs pour chaque nationalité
colors <- rainbow(nlevels(salary$native_country))
# Créer le graphique en barres empilées
barplot(nationality_income_table, col = colors, las = 2, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes")
# Ajouter une légende
legend("topright", legend = colnames(nationality_income_table), fill = colors, title = "Revenu")
# Créer le graphique en barres empilées
barplot(nationality_income_table, col = colors, las = 2, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes")
# Ajouter une légende
legend("topright", legend = colnames(nationality_income_table), fill = colors, title = "Revenu")
# Créer le graphique en barres empilées
barplot(nationality_income_table, col = colors, las = 2, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes")
# Ajouter une légende
legend("topright", legend = colnames(nationality_income_table), fill = colors, title = "Revenu")
glm_model = glm(income_40K ~ age+sex, data=salary, family = "binomial")
tbl_regression(glm_model, exponentiate = TRUE)
glm_model = glm(income_40K ~ age+sex, data=salary, family = "binomial")
tbl_regression(glm_model, exponentiate = TRUE)
library(car)
glm_model = glm(income_40K ~ age+sex, data=salary, family = "binomial")
tbl_regression(glm_model, exponentiate = TRUE)
library(compareGroups)
library(glmnet)
library(gtsummary)
library(gt)
tbl_regression(glm_model, exponentiate = TRUE)
install.packages("ggplot2")
library(ggplot2)
ggplot(salary, aes(x = income_40K, fill = income_40K)) +
geom_bar(position = "fill") +
facet_wrap(~ native_country) +
labs(x = "Revenu", y = "Proportion") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(salary, aes(x = income_40K, fill = income_40K)) +
geom_bar(position = "fill") +
facet_wrap(~ native_country) +
labs(x = "Revenu", y = "Proportion") +
theme(axis.text.x = element_text(angle = 90, hjust = 10))
ggplot(salary, aes(x = income_40K, fill = income_40K)) +
geom_bar(position = "fill") +
facet_wrap(~ native_country) +
labs(x = "Revenu", y = "Proportion") +
theme(axis.text.x = element_text(angle = 90, hjust = 100))
ggplot(salary, aes(x = income_40K, fill = income_40K)) +
geom_bar(position = "fill") +
facet_wrap(~ native_country) +
labs(x = "Revenu", y = "Proportion") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.1))
ggplot(salary_props, aes(x = Var1, y = Prop, fill = Var2)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::percent) +
labs(x = "Nationalité", y = "Proportion", fill = "Revenu") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ggtitle("Proportion de Revenu par Nationalité")
ggplot(salary$income_40K, aes(x = Var1, y = Prop, fill = Var2)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::percent) +
labs(x = "Nationalité", y = "Proportion", fill = "Revenu") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ggtitle("Proportion de Revenu par Nationalité")
barplot(nationality_table, beside = FALSE,
main = "Revenu par Nationalité",
xlab = "Nationalité", ylab = "Nombre de personnes",
col = c("gray", "gold"),
legend.text = c("<=50k", ">50k"),
las = 2)
# Générer le graphique en barres empilées sans les données des États-Unis
barplot(nationality_table_no_us, beside = FALSE,
main = "Revenu par Nationalité (sans les États-Unis)",
xlab = "Nationalité", ylab = "Nombre de personnes",
col = c("gray", "gold"),
legend.text = c("<=50k", ">50k"),
las = 2)
# Transformer en facteur en excluant les États-Unis
nationality_factor <- as.factor(salary$native_country)
nationality_factor <- nationality_factor[nationality_factor != " United-States"]
# Créer une nouvelle table de contingence sans les États-Unis
nationality_table_no_us <- table(nationality_factor, salary$income_40K[nationality_factor != " United-States"])
# Transformer en facteur en excluant les États-Unis
nationality_factor <- as.factor(salary$native_country)
nationality_factor <- nationality_factor[nationality_factor != " United-States"]
# Créer une nouvelle table de contingence sans les États-Unis
nationality_table_no_us <- table(nationality_factor, salary$income_40K[nationality_factor != " United-States"])
# Créer une nouvelle table de contingence sans les États-Unis
nationality_table_no_us <- table(nationality_factor, salary$income_40K)
# Créer une nouvelle table de contingence sans les États-Unis
nationality_table_no_us <- table(nationality_factor, salary$income_40K)
nationality_factor <- nationality_factor[nationality_factor != " United-States"]
# Créer une nouvelle table de contingence sans les États-Unis
nationality_table_no_us <- table(nationality_factor, salary$income_40K[nationality_factor != " United-States"])
# Générer le graphique en barres empilées sans les données des États-Unis
barplot(nationality_table_no_us, beside = FALSE,
main = "Revenu par Nationalité (sans les États-Unis)",
xlab = "Nationalité", ylab = "Nombre de personnes",
col = c("gray", "gold"),
legend.text = c("<=50k", ">50k"),
las = 2)
salary <- read.csv("Salarie.csv")
# Compter le nombre d'éléments par type dans chaque colonne
count_by_type <- lapply(salary, table)
# Afficher les résultats
print(count_by_type)
summary(salary$workclass[salary$workclass == " ?"])
summary(salary$workclass[salary$occupation == " ?"])
summary(salary$workclass[salary$native_country == " ?"])
summary(salary)
str(salary)
head(salary)
tail(salary)
View(salary)
colonnes <- ncol(salary)
colnames(salary)
lignes <- nrow(salary)
sprintf("Le dataframe a %d lignes et %d colonnes.", lignes, colonnes)
valeurs_manquantes_par_colonne <- colSums(is.na(salary))
print(valeurs_manquantes_par_colonne)
nationalite <- unique(salary$native_country)
print(nationalite)
table_nationalites <- table(salary$native_country)
# Créer un diagramme en camembert avec la fonction pie()
pie(table_nationalites, labels = names(table_nationalites), main = "Répartition des nationalités")
# Afficher le nombre de lignes par nationalité
print(table_nationalites)
table_sexe <- table(salary$sex)
pourcentages <- round(100 * table_sexe / sum(table_sexe), 1)
pie(table_sexe, labels = sprintf("%s\n%.1f%%", names(table_sexe), pourcentages), main = "Répartition par sexe")
table_marital <- table(salary$marital_status)
print(table_marital)
boxplot(salary$hours_per_week ~ salary$income_40K, data = salary)
boxplot(salary$age ~ salary$income_40K, data = salary)
salary$sex_binary <- ifelse(salary$sex == " Male", 1, 0)
# Recodage de la variable income_40k en income_50k qui aura
class(salary$income_40K)
class(as.factor(salary$income_40K))
salary$income_40K <- as.factor(salary$income_40K)
salary$income_50K <- ifelse(salary$income_40K == " >50K", 1, 0)
sum(is.na(salary$income_50K))
sum(is.na(salary$sex))
# Nuage de points Sexe vs Salaire
plot(salary$sex, salary$income_50K, main = "Nuage de points du Sexe vs Salaire", xlab = "Sexe", ylab = "Salaire")
