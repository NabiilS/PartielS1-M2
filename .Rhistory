scale_fill_gradient(low = "blue", high = "red") +
labs(x = "Nationalité", y = "Revenu", fill = "Proportion") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Créer une heatmap
ggplot(nationality_income_melted, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(x = "Nationalité", y = "Revenu", fill = "Proportion") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
names(nationality_income_melted)
names(nationality_income_melted)
# Créer une heatmap
ggplot(nationality_income_melted, aes(x = nationality_factor_no_us, y = income_40K_no_us, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(x = "Nationalité", y = "Revenu", fill = "Proportion") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
sum(is.na(salary$sex))
sum(salary$sex)
sum(salary$sex)
length(salary$sex)
length(salary$income_40K)
# Nuage de points Sexe vs Salaire
plot(salary$sex, salary$income_40K, main = "Nuage de points du Sexe vs Salaire", xlab = "Sexe", ylab = "Salaire")
salary$income_40K <- as.factor(salary$income_40K)
length(salary$sex)
length(salary$income_40K)
# Nuage de points Sexe vs Salaire
plot(salary$sex, salary$income_40K, main = "Nuage de points du Sexe vs Salaire", xlab = "Sexe", ylab = "Salaire")
is.na(salary$sex)
class(as.factor(salary$sex))
is.na(salary$sex)
is.na(salary$income_40K)
which(is.na(salary$sex))
which(is.na(salary$income_40K))
which(is.infinite(salary$sex))
which(is.infinite(salary$income_40K))
unique(salary$sex)
ggplot(salary, aes(x = sex, y = income_40K)) +
geom_point() +
ggtitle("Nuage de points du Sexe vs Salaire") +
xlab("Sexe") + ylab("Salaire")
library(ggplot2)
ggplot(salary, aes(x = sex, y = income_40K)) +
geom_point() +
ggtitle("Nuage de points du Sexe vs Salaire") +
xlab("Sexe") + ylab("Salaire")
# Nuage de points Sexe vs Salaire
plot(salary$age, salary$income_40K, main = "Nuage de points du Sexe vs Salaire", xlab = "Age", ylab = "Salaire")
ggplot(salary, aes(x = sex, y = income_40K)) +
geom_point() +
ggtitle("Nuage de points du Sexe vs Salaire") +
xlab("Sexe") + ylab("Salaire")
ggplot(salary, aes(x = sex, y = income_50K)) +
geom_bar(stat = "summary", fun = "mean") +
ylab("Moyenne de Salaire >50K") +
ggtitle("Comparaison de la Moyenne de Salaire par Sexe")
# Créer un indice pour les lignes qui ne sont pas les États-Unis
non_us_indices <- which(salary$native_country != " United-States")
# Utiliser cet indice pour créer le facteur de nationalité et la variable de revenu correspondante
nationality_factor_no_us <- nationality_factor[non_us_indices]
income_40K_no_us <- salary$income_40K[non_us_indices]
# Créer la table de contingence en utilisant les données filtrées
nationality_table_no_us <- table(nationality_factor_no_us, income_40K_no_us)
library(ggplot2)
nationality_income_melted <- melt(nationality_table_no_us)
library(compareGroups)
library(gtsummary)
library(glmnet)
library(car)
detach("package:carData", unload = TRUE)
library(carData)
# Créer un indice pour les lignes qui ne sont pas les États-Unis
non_us_indices <- which(salary$native_country != " United-States")
# Utiliser cet indice pour créer le facteur de nationalité et la variable de revenu correspondante
nationality_factor_no_us <- nationality_factor[non_us_indices]
income_40K_no_us <- salary$income_40K[non_us_indices]
# Créer la table de contingence en utilisant les données filtrées
nationality_table_no_us <- table(nationality_factor_no_us, income_40K_no_us)
library(ggplot2)
nationality_income_melted <- melt(nationality_table_no_us)
library(melt)
# Créer un indice pour les lignes qui ne sont pas les États-Unis
non_us_indices <- which(salary$native_country != " United-States")
# Utiliser cet indice pour créer le facteur de nationalité et la variable de revenu correspondante
nationality_factor_no_us <- nationality_factor[non_us_indices]
income_40K_no_us <- salary$income_40K[non_us_indices]
# Créer la table de contingence en utilisant les données filtrées
nationality_table_no_us <- table(nationality_factor_no_us, income_40K_no_us)
library(ggplot2)
nationality_income_melted <- melt(nationality_table_no_us)
# Créer un indice pour les lignes qui ne sont pas les États-Unis
non_us_indices <- which(salary$native_country != " United-States")
# Utiliser cet indice pour créer le facteur de nationalité et la variable de revenu correspondante
nationality_factor_no_us <- nationality_factor[non_us_indices]
income_40K_no_us <- salary$income_40K[non_us_indices]
# Créer la table de contingence en utilisant les données filtrées
nationality_table_no_us <- table(nationality_factor_no_us, income_40K_no_us)
library(ggplot2)
nationality_income_melted <- melt(nationality_table_no_us)
contingency_table <- table(salary$sex, salary$income_40K)
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "lightblue"),
legend.text = c("Femme", "Homme"),
args.legend = list(x = "topright"),
names.arg = c("<=50k", ">50k"))
# Créer un indice pour les lignes qui ne sont pas les États-Unis
non_us_indices <- which(salary$native_country != " United-States")
# Utiliser cet indice pour créer le facteur de nationalité et la variable de revenu correspondante
nationality_factor_no_us <- nationality_factor[non_us_indices]
income_40K_no_us <- salary$income_40K[non_us_indices]
# Créer la table de contingence en utilisant les données filtrées
nationality_table_no_us <- table(nationality_factor_no_us, income_40K_no_us)
library(ggplot2)
nationality_income_melted <- melt(nationality_table_no_us)
salary <- read.csv("Salarie.csv")
# Compter le nombre d'éléments par type dans chaque colonne
count_by_type <- lapply(salary, table)
# Afficher les résultats
print(count_by_type)
summary(salary$workclass[salary$workclass == " ?"])
summary(salary$workclass[salary$occupation == " ?"])
summary(salary$workclass[salary$native_country == " ?"])
summary(salary)
str(salary)
head(salary)
tail(salary)
View(salary)
colonnes <- ncol(salary)
colnames(salary)
lignes <- nrow(salary)
sprintf("Le dataframe a %d lignes et %d colonnes.", lignes, colonnes)
valeurs_manquantes_par_colonne <- colSums(is.na(salary))
print(valeurs_manquantes_par_colonne)
nationalite <- unique(salary$native_country)
print(nationalite)
table_nationalites <- table(salary$native_country)
# Créer un diagramme en camembert avec la fonction pie()
pie(table_nationalites, labels = names(table_nationalites), main = "Répartition des nationalités")
# Afficher le nombre de lignes par nationalité
print(table_nationalites)
table_sexe <- table(salary$sex)
pourcentages <- round(100 * table_sexe / sum(table_sexe), 1)
pie(table_sexe, labels = sprintf("%s\n%.1f%%", names(table_sexe), pourcentages), main = "Répartition par sexe")
table_marital <- table(salary$marital_status)
print(table_marital)
boxplot(salary$hours_per_week ~ salary$income_40K, data = salary)
boxplot(salary$age ~ salary$income_40K, data = salary)
salary$sex_binary <- ifelse(salary$sex == " Male", 1, 0)
# Recodage de la variable income_40k en income_50k qui aura
class(salary$income_40K)
class(as.factor(salary$income_40K))
class(as.factor(salary$sex))
which(is.na(salary$sex))
which(is.na(salary$income_40K))
which(is.infinite(salary$sex))
which(is.infinite(salary$income_40K))
unique(salary$sex)
salary$income_40K <- as.factor(salary$income_40K)
length(salary$sex)
length(salary$income_40K)
contingency_table <- table(salary$sex, salary$income_40K)
barplot(contingency_table, beside = FALSE,
main = "Revenu par Sexe",
xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "lightblue"),
legend.text = c("Femme", "Homme"),
args.legend = list(x = "topright"),
names.arg = c("<=50k", ">50k"))
# Calculer la proportion de personnes pour chaque pays et catégorie de revenu
nationality_income_prop <- as.data.frame.matrix(prop.table(nationality_table_no_us, 1))
nationality_income_melted <- melt(nationality_income_prop)
# Créer la table de contingence en utilisant les données filtrées
nationality_table_no_us <- table(nationality_factor_no_us, income_40K_no_us)
# Calculer la proportion de personnes pour chaque pays et catégorie de revenu
nationality_income_prop <- as.data.frame.matrix(prop.table(nationality_table_no_us, 1))
nationality_income_melted <- melt(nationality_income_prop)
names(nationality_income_melted)
# Créer une heatmap
ggplot(nationality_income_melted, aes(x = nationality_factor_no_us, y = income_40K_no_us, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(x = "Nationalité", y = "Revenu", fill = "Proportion") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Calculer la proportion de personnes pour chaque pays et catégorie de revenu
nationality_income_prop <- as.data.frame.matrix(prop.table(nationality_table_no_us, 1))
# Créer une heatmap
ggplot(nationality_income_melted, aes(x = nationality_factor_no_us, y = income_40K_no_us, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(x = "Nationalité", y = "Revenu", fill = "Proportion") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(salary, aes(x = as.factor(education_num), y = income_50K)) +
geom_bar(stat = "summary", fun = "mean") +
xlab("Niveau d'Éducation") +
ylab("Moyenne de Salaire >50K") +
ggtitle("Moyenne de Salaire par Niveau d'Éducation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
ggplot(salary, aes(x = salary$education_num, y = salary$income_40K)) +
geom_bar(stat = "summary", fun = "mean") +
xlab("Niveau d'Éducation") +
ylab("Moyenne de Salaire >50K") +
ggtitle("Moyenne de Salaire par Niveau d'Éducation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
ggplot(salary, aes(x = as.factor(education_num), y = income_50K)) +
geom_boxplot() +
xlab("Niveau d'Éducation") +
ylab("Salaire >50K") +
ggtitle("Distribution des Salaires par Niveau d'Éducation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
ggplot(salary, aes(x = salary$education_num, y = salary$income_40K)) +
geom_boxplot() +
xlab("Niveau d'Éducation") +
ylab("Salaire >50K") +
ggtitle("Distribution des Salaires par Niveau d'Éducation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
ggplot(salary, aes(x = salary$education_num, y = salary$income_40K)) +
geom_violin() +
xlab("Niveau d'Éducation") +
ylab("Salaire >50K") +
ggtitle("Distribution des Salaires par Niveau d'Éducation avec Densité") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
ggplot(salary, aes(x = education_num, y =income_40K)) +
geom_violin() +
xlab("Niveau d'Éducation") +
ylab("Salaire >50K") +
ggtitle("Distribution des Salaires par Niveau d'Éducation avec Densité") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
ggplot(salary, aes(x = education_num, y = income_40K)) +
geom_boxplot() +
xlab("Niveau d'Éducation") +
ylab("Salaire >50K") +
ggtitle("Distribution des Salaires par Niveau d'Éducation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
ggplot(salary, aes(x = education_num, y = income_40K)) +
geom_bar(stat = "summary", fun = "mean") +
xlab("Niveau d'Éducation") +
ylab("Moyenne de Salaire >50K") +
ggtitle("Moyenne de Salaire par Niveau d'Éducation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
ggplot(salary, aes(x = marital_status, y = income_40K)) +
geom_bar(stat = "summary", fun = "mean") +
xlab("Statut Marital") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Statut Marital") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Inclinez les étiquettes pour qu'elles soient lisibles
ggplot(salary, aes(x = marital_status, y = income_40K)) +
geom_bar(stat = "summary", fun = "mean") +
xlab("Statut Marital") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Statut Marital") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Inclinez les étiquettes pour qu'elles soient lisibles
library(ggplot2)
# Calculer les moyennes en pourcentage
salary$income_50K <- as.numeric(salary$income_50K) # Assurez-vous que c'est numérique
# Calculer les moyennes en pourcentage
aggregated_data <- salary %>%
group_by(marital_status) %>%
summarize(percentage = mean(income_40K) * 100) # Calcule le pourcentage
# Calculer les moyennes en pourcentage
aggregated_data <- salary %>%
group_by(marital_status) %>%
summarize(percentage = mean(income_40K) * 100) # Calcule le pourcentage
library(ggplot2)
# Calculer les moyennes en pourcentage
aggregated_data <- salary %>%
group_by(marital_status) %>%
summarize(percentage = mean(income_40K) * 100) # Calcule le pourcentage
library(dplyr)
library(ggplot2)
# Calculer les moyennes en pourcentage
aggregated_data <- salary %>%
group_by(marital_status) %>%
summarize(percentage = mean(income_40K) * 100) # Calcule le pourcentage
# Créer le graphique avec des étiquettes de pourcentage
ggplot(aggregated_data, aes(x = marital_status, y = percentage)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.5) +
xlab("Statut Marital") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Statut Marital") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Inclinez les étiquettes pour qu'elles soient lisibles
library(dplyr)
library(ggplot2)
# Assurez-vous que 'income_40K' est numérique pour le calcul de la moyenne
# Convertissez-le en binaire si ce n'est pas déjà fait (en supposant que " >50K" est votre catégorie d'intérêt)
salary$income_40K_binary <- ifelse(salary$income_40K == " >50K", 1, 0)
# Calculer les moyennes en pourcentage
aggregated_data <- salary %>%
group_by(marital_status) %>%
summarize(percentage = mean(income_40K_binary) * 100) # Calcule le pourcentage
# Créer le graphique avec des étiquettes de pourcentage
ggplot(aggregated_data, aes(x = marital_status, y = percentage)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.25, hjust = 0.5) +
xlab("Statut Marital") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Statut Marital") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Inclinez les étiquettes pour qu'elles soient lisibles
detach("package:dplyr", unload = TRUE)
library(dplyr)
library(ggplot2)
salary$income_40K_binary <- ifelse(salary$income_40K == " >50K", 1, 0)
aggregated_data <- salary %>%
group_by(marital_status) %>%
summarize(percentage = mean(income_40K_binary) * 100)
ggplot(aggregated_data, aes(x = marital_status, y = percentage)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.25, hjust = 0.5) +
xlab("Statut Marital") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Statut Marital") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
detach("package:dplyr", unload = TRUE)
library(dplyr)
library(ggplot2)
salary$income_40K_binary <- ifelse(salary$income_40K == " >50K", 1, 0)
aggregated_data <- salary %>%
group_by(marital_status) %>%
summarize(percentage = mean(income_40K_binary) * 100)
ggplot(aggregated_data, aes(x = marital_status, y = percentage)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.25, hjust = 0.5) +
xlab("Statut Marital") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Statut Marital") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
salary$income_40K_binary <- ifelse(salary$income_40K == " >50K", 1, 0)
aggregated_data <- salary %>%
group_by(marital_status) %>%
summarize(percentage = mean(income_40K_binary) * 100)
ggplot(aggregated_data, aes(x = marital_status, y = percentage)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.25, hjust = 0.5) +
xlab("Statut Marital") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Statut Marital") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(salary, aes(x = education_num, y = income_40K)) +
geom_bar(stat = "summary", fun = "mean") +
xlab("Niveau d'Éducation") +
ylab("Moyenne de Salaire >50K") +
ggtitle("Moyenne de Salaire par Niveau d'Éducation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
ggplot(salary, aes(x = education_num, y = income_40K)) +
geom_boxplot() +
xlab("Niveau d'Éducation") +
ylab("Salaire >50K") +
ggtitle("Distribution des Salaires par Niveau d'Éducation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
ggplot(salary, aes(x = education_num, y =income_40K)) +
geom_violin() +
xlab("Niveau d'Éducation") +
ylab("Salaire >50K") +
ggtitle("Distribution des Salaires par Niveau d'Éducation avec Densité") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent
boxplot(airquality_net$Ozone, col = my_colors ) ## Voir comment interpréter ce graphique
# Créer un histogramme avec une couleur par âge
my_colors <- rainbow(length(unique(salary$age)))
hist(salary$age, col = my_colors, main = "Histogramme par âge", xlab = "Âge")
library(dplyr)
library(ggplot2)
aggregated_data <- salary %>%
group_by(occupation) %>%
summarize(percentage = mean(income_binary) * 100)
aggregated_data <- salary %>%
group_by(occupation) %>%
summarize(percentage = mean(income_40K_binary) * 100)
library(dplyr)
library(ggplot2)
aggregated_data <- salary %>%
group_by(occupation) %>%
summarize(percentage = mean(income_40K_binary) * 100)
ggplot(aggregated_data, aes(x = occupation, y = percentage)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.25, hjust = 0.5) +
xlab("Occupation") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Occupation") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
aggregated_data <- salary %>%
group_by(workclass) %>%
summarize(percentage = mean(income_40K_binary) * 100)
ggplot(aggregated_data, aes(x = workclass, y = percentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.25, hjust = 0.5) +
xlab("Classe de Travail") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Classe de Travail") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
aggregated_data_relationship <- salary %>%
group_by(relationship) %>%
summarize(percentage = mean(income_binary) * 100) # Calcule le pourcentage
aggregated_data_relationship <- salary %>%
group_by(relationship) %>%
summarize(percentage = mean(income_40K_binary) * 100) # Calcule le pourcentage
# Créer le graphique pour relationship
ggplot(aggregated_data_relationship, aes(x = relationship, y = percentage)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.3, hjust = 0.5) +
xlab("Relation Familiale") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Relation Familiale") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculer les pourcentages pour race
aggregated_data_race <- salary %>%
group_by(race) %>%
summarize(percentage = mean(income_40K_binary) * 100) # Calcule le pourcentage
# Créer le graphique pour race
ggplot(aggregated_data_race, aes(x = race, y = percentage)) +
geom_bar(stat = "identity", fill = "lightgreen") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.3, hjust = 0.5) +
xlab("Race") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Race") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(ggplot2)
# Calculer les pourcentages pour native_country
aggregated_data_country <- salary %>%
group_by(native_country) %>%
summarize(percentage = mean(income_40K_binary) * 100) # Calcule le pourcentage
# Créer le graphique pour native_country
ggplot(aggregated_data_country, aes(x = reorder(native_country, -percentage), y = percentage)) +
geom_bar(stat = "identity", fill = "tomato") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.3, hjust = 0.5) +
xlab("Pays d'origine") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Pays d'origine") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
# Créer le graphique pour native_country
ggplot(aggregated_data_country, aes(x = reorder(native_country, -percentage), y = percentage)) +
geom_bar(stat = "identity", fill = "tomato") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.3, hjust = 0.5) +
xlab("Pays d'origine") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Pays d'origine") +
theme(axis.text.x = element_text(angle = 90, hjust = 10, vjust = 10))
library(dplyr)
library(ggplot2)
# Calculer les pourcentages pour native_country
aggregated_data_country <- salary %>%
group_by(native_country) %>%
summarize(percentage = mean(income_40K_binary) * 100) # Calcule le pourcentage
# Créer le graphique pour native_country
ggplot(aggregated_data_country, aes(x = reorder(native_country, -percentage), y = percentage)) +
geom_bar(stat = "identity", fill = "tomato") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.3, hjust = 0.5) +
xlab("Pays d'origine") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Pays d'origine") +
theme(axis.text.x = element_text(angle = 90, hjust = 10, vjust = 10))
library(dplyr)
library(ggplot2)
# Calculer les pourcentages pour native_country
aggregated_data_country <- salary %>%
group_by(native_country) %>%
summarize(percentage = mean(income_40K_binary) * 100) # Calcule le pourcentage
# Créer le graphique pour native_country
ggplot(aggregated_data_country, aes(x = reorder(native_country, -percentage), y = percentage)) +
geom_bar(stat = "identity", fill = "tomato") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.3, hjust = 0.5) +
xlab("Pays d'origine") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Pays d'origine") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
library(dplyr)
library(ggplot2)
# Calculer les pourcentages pour native_country
aggregated_data_country <- salary %>%
group_by(native_country) %>%
summarize(percentage = mean(income_40K_binary) * 100) # Calcule le pourcentage
# Créer le graphique pour native_country
ggplot(aggregated_data_country, aes(x = reorder(native_country, -percentage), y = percentage)) +
geom_bar(stat = "identity", fill = "tomato") +
geom_text(aes(label = sprintf("%.1f%%", percentage)),
position = position_dodge(width = 0.9),
vjust = -0.3, hjust = 0.5) +
xlab("Pays d'origine") +
ylab("Pourcentage gagnant >50K") +
ggtitle("Pourcentage gagnant >50K par Pays d'origine") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
