---
title: "ProjetS1M2"
format: html
editor: visual
---

## Importation du Dataset "Salary" et installation des packages

Pour notre mini projet d'analyse des salaires, nous avons besoin des packages ci dessous: - dplyr - ggplot2 - compareGroups - car - carData - glmnet - scatterplot3d - gtsummary

```{r}
library(dplyr)
library(ggplot2)
library(compareGroups)
library(car)
library(carData)
library(glmnet)
library(scatterplot3d)
library(gtsummary)
c <- read.csv("Salarie.csv", na.strings = c(" ?", NA, " ","?"))
salary <-na.omit(c)
dim(salary)
```

### Compréhension du Dataset

Grandes lignes du jeu de donnée (avec des informations sur les types)

```{r}
summary(salary)
str(salary)
```

### Visualisation du début et la fin de la base de donnée

```{r}
head(salary)
tail(salary)
```

## Vu complète sur le dataset

```{r}
View(salary)
```

## Nombre de ligne et de colonne ainsi que quelques données statistiques du dataset

```{r}
colonnes <- ncol(salary)
colnames(salary)

lignes <- nrow(salary)

sprintf("Le dataframe a %d lignes et %d colonnes.", lignes, colonnes)
```

## Vérification des valeurs NA

```{r}
valeurs_manquantes_par_colonne <- colSums(is.na(salary))
print(valeurs_manquantes_par_colonne)
```

## Variable non renseigné

```{r}
summary(salary$workclass[salary$workclass == " ?"])
summary(salary$workclass[salary$occupation == " ?"])
summary(salary$workclass[salary$native_country == " ?"])
```


## recodage
```{r}


salary$sex <- as.factor(salary$sex) 
salary$race <- as.factor(salary$race)
salary$native_country <- as.factor(salary$native_country) 
salary$income_40K <- as.factor(salary$income_40K)
```
## Les différente origine
```{r}
nationalite <- unique(salary$native_country)
print(nationalite)

table_nationalites <- table(salary$native_country)

# Créer un diagramme en camembert avec la fonction pie()
pie(table_nationalites, labels = names(table_nationalites), main = "Répartition des nationalités")

# Afficher le nombre de lignes par nationalité
print(table_nationalites)
```

```{r}
library(dplyr)
library(ggplot2)
library(viridis)

# Définir le seuil pour le regroupement dans "Other"
threshold <- 5

# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
  filter(native_country != " United-States") %>%  # Exclure les États-Unis
  group_by(native_country) %>%
  summarise(Count = n()) %>%
  ungroup()

# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10

# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
  mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
  group_by(native_country) %>%
  summarise(Count = sum(Count)) %>%
  mutate(Percentage = Count / sum(Count) * 100) %>%
  arrange(desc(Percentage))

# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_viridis(discrete = TRUE) +  # Couleurs viridis
  geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
            position = position_stack(vjust = 0.5)) +
  theme_void() +
  theme(legend.position = "right") +
  labs(fill = "Pays d'origine")


# Assurez-vous que table_nationalites utilise le nom des pays pour la légende
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_viridis(discrete = TRUE, name = "Pays d'origine") +  # Nom de la légende
  geom_text(aes(label = ifelse(native_country != "Other", paste(sprintf("%.1f%%", Percentage)), "")),
            position = position_stack(vjust = 0.5)) +
  theme_void() +
  theme(legend.position = "right") +
  guides(fill = guide_legend(title.position = "top", title.hjust = 0.5))  # Ajuster la position du titre de la légende

```

```{r}
# Création d'une nouvelle table pour la visualisation sans les États-Unis
table_nationalites <- salary %>%
  filter(native_country != " United-States") %>%  # Exclure les États-Unis
  group_by(native_country) %>%
  summarise(Count = n()) %>%
  ungroup() %>%
  mutate(Percentage = Count / sum(Count) * 100) %>%
  arrange(desc(Percentage))

# Seuil pour le nombre minimum de personnes par nationalité
min_count <- 10

# Regrouper les nationalités moins représentées sous 'Other'
table_nationalites <- table_nationalites %>%
  mutate(native_country = ifelse(Count < min_count, 'Other', native_country)) %>%
  group_by(native_country) %>%
  summarise(Count = sum(Count), Percentage = sum(Percentage)) %>%
  ungroup() %>%
  mutate(native_country = as.character(native_country))  # Convertir en caractère pour éviter les problèmes de facteur

# Créer un diagramme en camembert avec ggplot2 sans les États-Unis
ggplot(table_nationalites, aes(x = "", y = Percentage, fill = native_country)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_viridis(discrete = TRUE, begin = 0.3, end = 0.9, direction = -1, name = "Pays d'origine") +
  geom_text(aes(label = ifelse(native_country != "Other", paste(native_country, sprintf("%.1f%%", Percentage)), "")),
            position = position_stack(vjust = 0.5), size = 3) +
  theme_void() +
  theme(legend.position = "right", legend.text = element_text(size = 6), legend.title = element_text(size = 8)) +
  guides(fill = guide_legend(title.position = "top", title.hjust = 0.5, label.position = "right"))  # Ajuster la position du titre de la légende


```

## Répartition par sexe

```{r}
table_sexe <- table(salary$sex)
pourcentages <- round(100 * table_sexe / sum(table_sexe), 1)
pie(table_sexe, labels = sprintf("%s\n%.1f%%", names(table_sexe), pourcentages), main = "Répartition par sexe")
```

## Situation marital

```{r}
table_marital <- table(salary$marital_status)
print(table_marital)

```

## Graphe et recodage de la variable sex

```{r}
boxplot(salary$hours_per_week ~ salary$income_40K, data = salary)
boxplot(salary$age ~ salary$income_40K, data = salary)


salary$sex_binary <- ifelse(salary$sex == " Male", 1, 0)


```

## Recodage de la variable income_40K en income_50K en boolean

```{r}

# Recodage de la variable income_40k en income_50k qui aura
class(salary$income_40K)
class(as.factor(salary$income_40K))
class(as.factor(salary$sex))


which(is.na(salary$sex))
which(is.na(salary$income_40K))

which(is.infinite(salary$sex))
which(is.infinite(salary$income_40K))

unique(salary$sex)

length(salary$sex)
length(salary$income_40K)
```

# Graphique en barres empilées avec les ajustements

```{r}
contingency_table <- table(salary$sex, salary$income_40K)

barplot(contingency_table, beside = FALSE, 
        main = "Revenu par Sexe",
        xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "lightblue"),
        legend.text = c("Femme", "Homme"), 
        args.legend = list(x = "topright"),
        names.arg = c("<=50k", ">50k")) 
```

```{r}
ggplot(salary, aes(x = education_num, y = income_40K)) + 
  geom_bar(stat = "summary", fun = "mean") +
  xlab("Niveau d'Éducation") +
  ylab("Moyenne de Salaire >50K") +
  ggtitle("Moyenne de Salaire par Niveau d'Éducation") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) 


ggplot(salary, aes(x = education_num, y = income_40K)) + 
  geom_boxplot() +
  xlab("Niveau d'Éducation") +
  ylab("Salaire >50K") +
  ggtitle("Distribution des Salaires par Niveau d'Éducation") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

ggplot(salary, aes(x = education_num, y =income_40K)) + 
  geom_violin() +
  xlab("Niveau d'Éducation") +
  ylab("Salaire >50K") +
  ggtitle("Distribution des Salaires par Niveau d'Éducation avec Densité") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) 


```

```{r}
library(dplyr)
library(ggplot2)

salary$income_40K_binary <- ifelse(salary$income_40K == " >50K", 1, 0)

aggregated_data <- salary %>%
  group_by(marital_status) %>%
  summarize(percentage = mean(income_40K_binary) * 100)

ggplot(aggregated_data, aes(x = marital_status, y = percentage)) + 
  geom_bar(stat = "identity") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.25, hjust = 0.5) +
  xlab("Statut Marital") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Statut Marital") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

## Histogramme

```{r}
# Créer un histogramme avec une couleur par âge
my_colors <- rainbow(length(unique(salary$age)))
hist(salary$age, col = my_colors, main = "Histogramme par âge", xlab = "Âge")
```

```{r}
library(dplyr)
library(ggplot2)

aggregated_data <- salary %>%
  group_by(occupation) %>%
  summarize(percentage = mean(income_40K_binary) * 100)

ggplot(aggregated_data, aes(x = occupation, y = percentage)) + 
  geom_bar(stat = "identity", fill = "skyblue") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.25, hjust = 0.5) +
  xlab("Occupation") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Occupation") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

```

```{r}
library(dplyr)
library(ggplot2)

aggregated_data <- salary %>%
  group_by(workclass) %>%
  summarize(percentage = mean(income_40K_binary) * 100) 

ggplot(aggregated_data, aes(x = workclass, y = percentage)) + 
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.25, hjust = 0.5) +
  xlab("Classe de Travail") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Classe de Travail") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
aggregated_data_relationship <- salary %>%
  group_by(relationship) %>%
  summarize(percentage = mean(income_40K_binary) * 100) 

ggplot(aggregated_data_relationship, aes(x = relationship, y = percentage)) + 
  geom_bar(stat = "identity", fill = "cornflowerblue") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.3, hjust = 0.5) +
  xlab("Relation Familiale") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Relation Familiale") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
aggregated_data_race <- salary %>%
  group_by(race) %>%
  summarize(percentage = mean(income_40K_binary) * 100)

ggplot(aggregated_data_race, aes(x = race, y = percentage)) + 
  geom_bar(stat = "identity", fill = "lightgreen") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.3, hjust = 0.5) +
  xlab("Race") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Race") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
ggplot(aggregated_data_country, aes(x = reorder(native_country, -percentage), y = percentage)) + 
  geom_bar(stat = "identity", aes(fill = percentage)) +  # Utilisez 'fill' avec la variable 'percentage'
  scale_fill_gradient(low = "blue", high = "red") +  # Définissez le gradient de bleu à rouge
  xlab("Pays d'origine") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Pays d'origine") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))

```
## Regression logistique
```{r}

## y = b0 + age*b1 + sex*b2
glm_model = glm(income_40K ~ age+sex, data=salary, family = "binomial")


tbl_regression(glm_model, exponentiate = TRUE)

as_forest_plot(tbl_regression(glm_model, exponentiate = TRUE))

## y = b0 + sex*b1 + education_num*b2 + age*b3
reg_bin<- glm( (salary$income_40K)~salary$sex+salary$education_num+salary$age, family = "binomial")

tbl_regression(reg_bin, exponentiate = TRUE)

# library(devtools)
# 
# install_github("ddsjoberg/bstfun")  

library(bstfun)
  
as_forest_plot(tbl_regression(reg_bin, exponentiate = TRUE))
 
```

## Création de groupe par zone Géographique
```{r}

a <- salary$native_country

a[ a %in% c(" Iran"," Japan", " China", " Cambodia"," India"," Philippines"," Thailand"," Taiwan"," Laos"," Hong", " Vietnam")] <-" Asia"
a[ a %in% c(" United-States", " Canada", " Jamaica"," Haiti"," Puerto-Rico"," Cuba", " Dominican-Republic"," Trinadad&Tobago"," Outlying-US(Guam-USVI-etc)")] <-"North America"
a[ a %in% c(" South")] <-"Africa"
a[ a %in% c(" Mexico"," Honduras"," Columbia"," Ecuador"," El-Salvador"," Guatemala"," Peru"," Nicaragua")] <-"America Latina"
a[ a %in% c(" Italy"," Poland"," England"," Germany"," Portugal"," Greece"," France"," Ireland"," Yugoslavia"," Scotland"," Hungary"," Holand-Netherlands")] <-"Europe"

## Ajout de la colonne Groupe_pays
salary <- salary %>%
  mutate(Groupe_Pays = a)

  

```

## Regression logistique (outcome binaire)
```{r}
# Salaire en fonction du statut marital
glm_model = glm(income_40K ~ marital_status, data=salary, family = "binomial")


tbl_regression(glm_model, exponentiate = TRUE)

as_forest_plot(tbl_regression(glm_model, exponentiate = TRUE))


```
## Régression linéaire
```{r}
reg_win = lm(salary$capital_gain ~ salary$age)
summary(reg_win)

reg_loss = lm(salary$capital_loss ~ salary$age)
summary(reg_loss)

plot(salary$age,salary$capital_gain,main = "Analyse des gains en fonction de l'âge")
abline(reg_win)

plot(salary$age,salary$capital_loss,main = "Analyse des pertes en fonction de l'âge")
abline(reg_loss)

plot(predict(reg_win),salary$age, main = "Nuage de point des valeurs prédite en fonction des valeurs observé -Win")

plot(predict(reg_loss),salary$age, main = "Nuage de point des valeurs prédite en fonction des valeurs observé -Loss")

```

