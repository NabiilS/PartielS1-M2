---
title: "ProjetS1M2"
format: html
editor: visual
---

## Importation du Dataset "Salary"

```{r}
salary <- read.csv("Salarie.csv")
```

## Compter le nombre de "?"
```{r}
# Compter le nombre d'éléments par type dans chaque colonne
count_by_type <- lapply(salary, table)

# Afficher les résultats
print(count_by_type)
```

## Variable non renseigné 

```{r}
summary(salary$workclass[salary$workclass == " ?"])
summary(salary$workclass[salary$occupation == " ?"])
summary(salary$workclass[salary$native_country == " ?"])
```

### Compréhension du Dataset

Grandes lignes du jeu de donnée (avec des informations sur les types)

```{r}
summary(salary)
str(salary)
```

### Visualisation du début et la fin de la base de donnée

```{r}
head(salary)
tail(salary)
```

## Vu complète sur le dataset
```{r}
View(salary)
```

## Nombre de ligne et de colonne ainsi que quelques données statistiques du dataset
```{r}
colonnes <- ncol(salary)
colnames(salary)

lignes <- nrow(salary)

sprintf("Le dataframe a %d lignes et %d colonnes.", lignes, colonnes)
```

## Vérification des valeurs NA
```{r}
valeurs_manquantes_par_colonne <- colSums(is.na(salary))
print(valeurs_manquantes_par_colonne)
```
## Les différente origine
```{r}
nationalite <- unique(salary$native_country)
print(nationalite)

table_nationalites <- table(salary$native_country)

# Créer un diagramme en camembert avec la fonction pie()
pie(table_nationalites, labels = names(table_nationalites), main = "Répartition des nationalités")

# Afficher le nombre de lignes par nationalité
print(table_nationalites)
```

## Répartition par sexe
```{r}
table_sexe <- table(salary$sex)
pourcentages <- round(100 * table_sexe / sum(table_sexe), 1)
pie(table_sexe, labels = sprintf("%s\n%.1f%%", names(table_sexe), pourcentages), main = "Répartition par sexe")
```

## Situation marital
```{r}
table_marital <- table(salary$marital_status)
print(table_marital)

```
## Graphe et recodage de la variable sex
```{r}
boxplot(salary$hours_per_week ~ salary$income_40K, data = salary)
boxplot(salary$age ~ salary$income_40K, data = salary)


salary$sex_binary <- ifelse(salary$sex == " Male", 1, 0)


```
## Recodage de la variable income_40K en income_50K en boolean

```{r}

# Recodage de la variable income_40k en income_50k qui aura 
salary$income_50K <- ifelse(salary$income_40K == " >50K", 1, 0)
sum(is.na(salary$income_50K))
sum(is.na(salary$sex))
# Nuage de points Sexe vs Salaire
plot(salary$sex, salary$income_50K, main = "Nuage de points du Sexe vs Salaire", xlab = "Sexe", ylab = "Salaire")

plot(as.factor(salary$sex), salary$income_50K, main = "Nuage de points du Sexe vs Salaire", xlab = "Sexe", ylab = "Salaire")
```

```{r}
# Créer un tableau de contingence
contingency_table <- table(salary$sex_binary, salary$income_50K)

# Afficher le tableau de contingence
print(contingency_table)

# Graphique en barres empilées avec les ajustements
barplot(contingency_table, beside = FALSE, 
        main = "Revenu par Sexe",
        xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "lightblue"),
        legend.text = c("Femme", "Homme"), # Définit les textes de la légende
        args.legend = list(x = "topright"), # Positionne la légende
        names.arg = c("<=50k", ">50k")) # Définit les étiquettes de l'axe x

```
