---
title: "ProjetS1M2"
format: html
editor: visual
---

## Importation du Dataset "Salary"

```{r}
salary <- read.csv("Salarie.csv")
```

## Compter le nombre de "?"

```{r}
# Compter le nombre d'éléments par type dans chaque colonne
count_by_type <- lapply(salary, table)

# Afficher les résultats
print(count_by_type)
```

## Variable non renseigné

```{r}
summary(salary$workclass[salary$workclass == " ?"])
summary(salary$workclass[salary$occupation == " ?"])
summary(salary$workclass[salary$native_country == " ?"])
```

### Compréhension du Dataset

Grandes lignes du jeu de donnée (avec des informations sur les types)

```{r}
summary(salary)
str(salary)
```

### Visualisation du début et la fin de la base de donnée

```{r}
head(salary)
tail(salary)
```

## Vu complète sur le dataset

```{r}
View(salary)
```

## Nombre de ligne et de colonne ainsi que quelques données statistiques du dataset

```{r}
colonnes <- ncol(salary)
colnames(salary)

lignes <- nrow(salary)

sprintf("Le dataframe a %d lignes et %d colonnes.", lignes, colonnes)
```

## Vérification des valeurs NA

```{r}
valeurs_manquantes_par_colonne <- colSums(is.na(salary))
print(valeurs_manquantes_par_colonne)
```

## Les différente origine

```{r}
nationalite <- unique(salary$native_country)
print(nationalite)

table_nationalites <- table(salary$native_country)

# Créer un diagramme en camembert avec la fonction pie()
pie(table_nationalites, labels = names(table_nationalites), main = "Répartition des nationalités")

# Afficher le nombre de lignes par nationalité
print(table_nationalites)
```

## Répartition par sexe

```{r}
table_sexe <- table(salary$sex)
pourcentages <- round(100 * table_sexe / sum(table_sexe), 1)
pie(table_sexe, labels = sprintf("%s\n%.1f%%", names(table_sexe), pourcentages), main = "Répartition par sexe")
```

## Situation marital

```{r}
table_marital <- table(salary$marital_status)
print(table_marital)

```

## Graphe et recodage de la variable sex

```{r}
boxplot(salary$hours_per_week ~ salary$income_40K, data = salary)
boxplot(salary$age ~ salary$income_40K, data = salary)


salary$sex_binary <- ifelse(salary$sex == " Male", 1, 0)


```

## Recodage de la variable income_40K en income_50K en boolean

```{r}

# Recodage de la variable income_40k en income_50k qui aura
class(salary$income_40K)
class(as.factor(salary$income_40K))
class(as.factor(salary$sex))


which(is.na(salary$sex))
which(is.na(salary$income_40K))

which(is.infinite(salary$sex))
which(is.infinite(salary$income_40K))

unique(salary$sex)

salary$income_40K <- as.factor(salary$income_40K)
length(salary$sex)
length(salary$income_40K)
```

# Graphique en barres empilées avec les ajustements

```{r}
contingency_table <- table(salary$sex, salary$income_40K)

barplot(contingency_table, beside = FALSE, 
        main = "Revenu par Sexe",
        xlab = "Sexe", ylab = "Nombre de personnes", col = c("pink", "lightblue"),
        legend.text = c("Femme", "Homme"), 
        args.legend = list(x = "topright"),
        names.arg = c("<=50k", ">50k")) 
```

```{r}
# Créer un indice pour les lignes qui ne sont pas les États-Unis
non_us_indices <- which(salary$native_country != " United-States")

# Utiliser cet indice pour créer le facteur de nationalité et la variable de revenu correspondante
nationality_factor_no_us <- nationality_factor[non_us_indices]
income_40K_no_us <- salary$income_40K[non_us_indices]

# Créer la table de contingence en utilisant les données filtrées
nationality_table_no_us <- table(nationality_factor_no_us, income_40K_no_us)

library(ggplot2)
nationality_income_melted <- melt(nationality_table_no_us)
# Calculer la proportion de personnes pour chaque pays et catégorie de revenu
nationality_income_prop <- as.data.frame.matrix(prop.table(nationality_table_no_us, 1))
# Créer une heatmap
ggplot(nationality_income_melted, aes(x = nationality_factor_no_us, y = income_40K_no_us, fill = value)) +
  geom_tile() +
  scale_fill_gradient(low = "blue", high = "red") +
  labs(x = "Nationalité", y = "Revenu", fill = "Proportion") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

```{r}
ggplot(salary, aes(x = education_num, y = income_40K)) + 
  geom_bar(stat = "summary", fun = "mean") +
  xlab("Niveau d'Éducation") +
  ylab("Moyenne de Salaire >50K") +
  ggtitle("Moyenne de Salaire par Niveau d'Éducation") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent


ggplot(salary, aes(x = education_num, y = income_40K)) + 
  geom_boxplot() +
  xlab("Niveau d'Éducation") +
  ylab("Salaire >50K") +
  ggtitle("Distribution des Salaires par Niveau d'Éducation") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent

ggplot(salary, aes(x = education_num, y =income_40K)) + 
  geom_violin() +
  xlab("Niveau d'Éducation") +
  ylab("Salaire >50K") +
  ggtitle("Distribution des Salaires par Niveau d'Éducation avec Densité") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Pour éviter que les étiquettes se chevauchent


```

```{r}
library(dplyr)
library(ggplot2)

salary$income_40K_binary <- ifelse(salary$income_40K == " >50K", 1, 0)

aggregated_data <- salary %>%
  group_by(marital_status) %>%
  summarize(percentage = mean(income_40K_binary) * 100)

ggplot(aggregated_data, aes(x = marital_status, y = percentage)) + 
  geom_bar(stat = "identity") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.25, hjust = 0.5) +
  xlab("Statut Marital") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Statut Marital") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```



## Histogramme

```{r}
# Créer un histogramme avec une couleur par âge
my_colors <- rainbow(length(unique(salary$age)))
hist(salary$age, col = my_colors, main = "Histogramme par âge", xlab = "Âge")
```

```{r}
library(dplyr)
library(ggplot2)

aggregated_data <- salary %>%
  group_by(occupation) %>%
  summarize(percentage = mean(income_40K_binary) * 100)

ggplot(aggregated_data, aes(x = occupation, y = percentage)) + 
  geom_bar(stat = "identity", fill = "skyblue") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.25, hjust = 0.5) +
  xlab("Occupation") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Occupation") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

```

```{r}
library(dplyr)
library(ggplot2)

aggregated_data <- salary %>%
  group_by(workclass) %>%
  summarize(percentage = mean(income_40K_binary) * 100) 

ggplot(aggregated_data, aes(x = workclass, y = percentage)) + 
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.25, hjust = 0.5) +
  xlab("Classe de Travail") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Classe de Travail") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
aggregated_data_relationship <- salary %>%
  group_by(relationship) %>%
  summarize(percentage = mean(income_40K_binary) * 100) # Calcule le pourcentage

# Créer le graphique pour relationship
ggplot(aggregated_data_relationship, aes(x = relationship, y = percentage)) + 
  geom_bar(stat = "identity", fill = "cornflowerblue") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.3, hjust = 0.5) +
  xlab("Relation Familiale") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Relation Familiale") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


```{r}
# Calculer les pourcentages pour race
aggregated_data_race <- salary %>%
  group_by(race) %>%
  summarize(percentage = mean(income_40K_binary) * 100) # Calcule le pourcentage

# Créer le graphique pour race
ggplot(aggregated_data_race, aes(x = race, y = percentage)) + 
  geom_bar(stat = "identity", fill = "lightgreen") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.3, hjust = 0.5) +
  xlab("Race") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Race") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
library(dplyr)
library(ggplot2)

# Calculer les pourcentages pour native_country
aggregated_data_country <- salary %>%
  group_by(native_country) %>%
  summarize(percentage = mean(income_40K_binary) * 100) # Calcule le pourcentage

# Créer le graphique pour native_country
ggplot(aggregated_data_country, aes(x = reorder(native_country, -percentage), y = percentage)) + 
  geom_bar(stat = "identity", fill = "tomato") +
  geom_text(aes(label = sprintf("%.1f%%", percentage)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.3, hjust = 0.5) +
  xlab("Pays d'origine") +
  ylab("Pourcentage gagnant >50K") +
  ggtitle("Pourcentage gagnant >50K par Pays d'origine") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))

```

```{r}
glm_model = glm(income_40K ~ age+sex, data=salary, family = "binomial")
tbl_regression(glm_model, exponentiate = TRUE)
```

## Installer compareGroup, gtsummary, glmnet et car/carData

```{r}
package(carret)
predict(glm_model,)
```
